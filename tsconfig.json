{
  "compilerOptions": {
    "target": "es5",                                /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */
    "module": "commonjs",                           /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */
    "strict": true,                                 /* Enable all strict type-checking options. */
    "esModuleInterop": true,                        /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */
    "skipLibCheck": true,                           /* Skip type checking of declaration files. */
    "forceConsistentCasingInFileNames": true,       /* Disallow inconsistently-cased references to the same file. */
    "outDir": "build",                              /* Where TypeScript generates our compiled code. We specify it to be in build/ folder.*/
    "rootDir": "./",                                /* This is where TypeScript looks for our code, and we’ll write our TypeScript there.*/
    "baseUrl": "./",                                /* Base directory to resolve non-absolute module names. 
                                                       As we don’t want relative import path hell like this 
                                                       import {functionA} from “../../../libs/fileA”*/
    "paths": {                                      /* A series of entries which re-map imports to lookup locations relative to the baseUrl we define above*/
      "*": ["*", "build/*"]
    }    
  }
}